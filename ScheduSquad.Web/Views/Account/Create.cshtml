@model CreateAccountViewModel

@{
    ViewData["Title"] = "Create Account";
    Layout = "~/Views/Shared/_UnauthLayout.cshtml";
}



@if (ViewData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @ViewData["ErrorMessage"]
    </div>
}
<div class="container mt-5">
    <div class="row  justify-content-center">
        <div class="col-md-6 d-flex justify-content-center">
            <img src="~/StaticFiles/images/ScheduSquad_Logo_WhiteBorder.png" class="img" />
        </div>
        <form method="post">
            <h1>Create Account</h1>
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name</label>
                <input type="text" class="form-control" id="firstName" name="FirstName" value="@Model.FirstName"
                    required>
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name</label>
                <input type="text" class="form-control" id="lastName" name="LastName" value="@Model.LastName" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" name="Email" value="@Model.Email" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="Password" required>
            </div>
            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <input type="password" class="form-control" id="confirmPassword" name="ConfirmPassword" required>
            </div>
            <div>
                <div data-mdb-alert-init class="alert d-none" role="alert" data-mdb-color="warning" id="password-alert">
                    <ul class="list-unstyled">
                        <li class="requirements length">
                            <i class="fas fa-check text-success"></i>
                            <i class="fas fa-times text-danger"></i>
                            Your password must be at least 8 characters long.
                        </li>
                        <li class="requirements capital-letter">
                            <i class="fas fa-check text-success"></i>
                            <i class="fas fa-times text-danger"></i>
                            Your password must contain at least one capital letter.
                        </li>
                        <li class="requirements little-letter">
                            <i class="fas fa-check text-success"></i>
                            <i class="fas fa-times text-danger"></i>
                            Your password must contain at least one lowercase letter.
                        </li>
                        <li class="requirements number">
                            <i class="fas fa-check text-success"></i>
                            <i class="fas fa-times text-danger"></i>
                            Your password must contain at least one number.
                        </li>
                        <li class="requirements special-character">
                            <i class="fas fa-check text-success"></i>
                            <i class="fas fa-times text-danger"></i>
                            Your password must contain at least one special character (?!#$%&).
                        </li>
                        <li class="requirements match">
                            <i class="fas fa-check text-success"></i>
                            <i class="fas fa-times text-danger"></i>
                            Your passwords must be identical.
                        </li>
                    </ul>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Create Account</button>
        </form>
    </div>
</div>

@section scripts {
    <script>
        addEventListener("DOMContentLoaded", (event) => {
            const password = document.getElementById("password");
            const confirmPassword = document.getElementById("confirmPassword");
            const passwordAlert = document.getElementById("password-alert");
            const requirements = document.querySelectorAll(".requirements");
            const length = document.querySelector(".length");
            const capitalLetter = document.querySelector(".capital-letter");
            const lowercaseLetter = document.querySelector(".little-letter");
            const number = document.querySelector(".number");
            const specialCharacter = document.querySelector(".special-character");
            const match = document.querySelector(".match");

            requirements.forEach((element) => element.classList.add("wrong"));

            password.addEventListener("focus", () => {
                passwordAlert.classList.remove("d-none");
                if (!password.classList.contains("is-valid")) {
                    password.classList.add("is-invalid");
                }
            });

            password.addEventListener("input", () => {
                const value = password.value;
                const confirmValue = confirmPassword.value;
                const isLengthValid = value.length >= 8;
                const hasUpperCase = /[A-Z]/.test(value);
                const hasLowerCase = /[a-z]/.test(value);
                const hasNumber = /\d/.test(value);
                const hasSpecialChar = /[?!#$%&]/.test(value);
                const matches = value == confirmValue;

                length.classList.toggle("good", isLengthValid);
                length.classList.toggle("wrong", !isLengthValid);
                capitalLetter.classList.toggle("good", hasUpperCase);
                capitalLetter.classList.toggle("wrong", !hasUpperCase);
                lowercaseLetter.classList.toggle("good", hasLowerCase);
                lowercaseLetter.classList.toggle("wrong", !hasLowerCase);
                number.classList.toggle("good", hasNumber);
                number.classList.toggle("wrong", !hasNumber);
                specialCharacter.classList.toggle("good", hasSpecialChar);
                specialCharacter.classList.toggle("wrong", !hasSpecialChar);
                match.classList.toggle("good", matches);
                match.classList.toggle("wrong", !matches);

                const isPasswordValid = isLengthValid && hasUpperCase && hasLowerCase && hasNumber && hasSpecialChar && matches;

                if (isPasswordValid) {
                    password.classList.remove("is-invalid");
                    password.classList.add("is-valid");

                    requirements.forEach((element) => {
                        element.classList.remove("wrong");
                        element.classList.add("good");
                    });

                    passwordAlert.classList.remove("alert-warning");
                    passwordAlert.classList.add("alert-success");
                } else {
                    password.classList.remove("is-valid");
                    password.classList.add("is-invalid");

                    passwordAlert.classList.add("alert-warning");
                    passwordAlert.classList.remove("alert-success");
                }
            });

            password.addEventListener("blur", () => {
                passwordAlert.classList.add("d-none");
            });
        });
    </script>
}